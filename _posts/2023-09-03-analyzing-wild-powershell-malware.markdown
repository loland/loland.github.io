---
layout: post
title:  "Unknown Malware"
date:   2023-09-03 00:00:00 +0000
categories: malware
---

Yet another sample fresh off [MalwareBazaar](https://bazaar.abuse.ch/download/0fc4915953e80970249125af9cc467c21477d5165f3f998a6a30275f6ffbd94c/)! (Simply in LOVE with this website).

What I LOVE even more, is this malware icon. My brain crumbles in attempt to figure this out. Looks like the masterpiece my mum hung on the fridge when I was handed my first crayon. 

The icon literally serves no purpose (unless). But boy, could I just taste what I was getting myself into.

![malwareSrv_dumped](/assets/post_assets/unknown-malware/icon.png)


<br>
### 1. Static Analysis
#### 1.1. Strings

Well... I hadn't known what to expect when running `floss malware.exe`, but it sure as hell wasn't this cryptic ET language. 

Even Google Translate was at a loss for words with this one.

Threw a chunk of it into [CyberChef](https://gchq.github.io/CyberChef/) in search of greater purpose. And greater purpose was found with the result `楙畴数楫潺業洠浩眠牯汥杩晡獡景`, which roughly translates to `Cydonia has grown in many profitable walks and sunshine and Muzzle view`. I would like to thank my sponsor [DeepL](https://www.deepl.com/).

{% highlight powershell %}

------------------------------
| FLOSS ASCII STRINGS (6322) |
------------------------------

Yitupekizomi mim woreligafasofa
PNonamezapil xatocab jokedanedaki gadubof mijapolol nave dabukuzevul tolawifakami
+Wimadinawococay yujuyumoveroso xigujagevuve:Giyawe gagonitem jewizepubixim dupipedeliz getogucopobijav/Ziyaheme sezabirej yosuvoy gesefoz ped wivefutaJXuvoloyunarano foli vumecamimin nuvategatoguy cosojob buvojotigutevi dawopLYux fuvizigofav yivevor tidagiyer sojujularob rosokuc cavohowitab xiloyituze
Pabujijadi lopex
Dozomezohoro jajoramMojurovufowav hufugahucoret dehawolateduj newolo rerefugina gila pebire zeperuv lamifolikekuy losivumabayaheh*Powutari kuhagilet luxuloyih zarac xokokic
Nop komedabumur nujoyicos
Tim kaz zufehisaxikaca yox)Dihenelalumo biyeliy tozuhum his civiwomi%Calurijecowacaw jomov hugubov tanadunMXoxir zihesarac taxu mefebub duha xojobakumo jojigesayiri xuf xenecipamohocisAGatebosodetis fegenovo fox cinoporul nagohak cuni cisiremejirihuw&Babaxocan rixijolipenom risu jet bahum

{% endhighlight %}

<br>
#### 1.2. Packing
Popped the binary into `PEStudio`. `7.881` entropy in the `.text` section? Looks packed alright. Though, we can only guess where that unpacked payload is going.

![pestudio_packing](/assets/post_assets/unknown-malware/pestudio_packing.png)

<br>
### 2. Dynamic Analysis
My fingers were itching. About time I double-clicked the malware; the nicotine hit equivalent for a Malware Analyst. I hooked up REMnux with wireshark. With Procmon and Regshot on FlareVM.

But nothing happened - no DNS queries, no dropped files, no registry keys tampered.

Sounds like good 'ol anti-analysis at work. Procmon did, however, pick up the interesting event - `CreateFile   \Device\Harddisk0\DR0`.

![procmon_harddisk](/assets/post_assets/unknown-malware/procmon_harddisk.png)


<br>
### 3. Reversing
#### 3.1. Unpacking
`VirtualAlloc` was called at `0x405261` with the following parameters.

{% highlight powershell %}

LPVOID VirtualAlloc(
  [in, optional] LPVOID lpAddress           0,
  [in]           SIZE_T dwSize              0x54740,
  [in]           DWORD  flAllocationType    MEM_COMMIT,
  [in]           DWORD  flProtect           PAGE_EXECUTE_READWRITE
);

{% endhighlight %}

<br>
The allocated memory is then called at `0x40550e`. 
![valloc_called](/assets/post_assets/unknown-malware/valloc_called.png)

<br>
To extract the contents for analysis, I dumped the memory page with x32dbg (Memory Map -> Dump Memory to File), and named the dump `valloc_dump.bin` for further analysis. It does seem that there is more content to be unpacked.

Threw `valloc_dump.bin` into IDA. Below is an interesting code snippet.

![valloc_snippet](/assets/post_assets/unknown-malware/valloc_snippet.png)

<br>
#### 3.2. Anti-Analysis
A potential anti-disassembly trick performed by placing invalid instructions into code; preventing IDA from encapsulating the code as a function. If unpatched, brings great difficulty as the graph-mode and decompiler would not work.

![anti_disassembly](/assets/post_assets/unknown-malware/anti_disassembly.png)

<br>
A solution in this example, would be to replace the 4 NULL bytes at offset `0x38` with a `ret (0x3c)` instruction, and add some padding with `nop (0x90)`. As shown below, graph mode works again! 

![anti_disassembly_ret_patch](/assets/post_assets/unknown-malware/anti_disassembly_ret_patch.png)